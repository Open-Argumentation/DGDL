grammar dgdl;

system	: ( systemID '{' (game)+ '}' | game ) EOF; 
systemID	: identifier;
game	: gameID '{'composition (rule)* (interaction)+'}';
gameID	: identifier;
composition	: turnStructure (roleList)? participants (player)+ (store)*;
turnStructure	: '{''turns,' turnSize',' ordering (','maxTurns)?'}';
turnSize	: 'magnitude:' (number | 'single' | 'multiple');
ordering	: 'ordering:' (strict | liberal); 
maxTurns	: 'maxturns:' (number | runTimeVar);
runTimeVar	: '$' identifier '$';
roleList	: '{roles:' role(',' role)+ '}';
role	: 'speaker' | 'listener' | identifier;
participants	: '{players,''min:' number',''max:' (number | 'undefined') '}';
player	: '{player,''id:' (playerID | runTimeVar) (',' roleList)?'}';
playerID	: identifier;
store	: '{store,''id:' storeType',''owner:'storeOwner','storeStructure','visibility'}';
storeType	: identifier;
storeOwner	: playerID | '{'playerID(','playerID)+'}' | 'shared';
storeStructure: 'structure:'(set | queue | stack);
visibility	: 'visibility:'(publ | priv);
rule	: '{'ruleID' scope:'(initial | turnwise | movewise)','ruleBody'}';
ruleID	: identifier;
ruleBody	: effects | conditional('&'conditional)*;
effects	: '{'effect('&'effect)*'}';
effect	: effectID'('parameter(','parameter)*')';
effectID	: identifier;
parameter	: identifier | contentSet | contentVar | 'hello';
commitment	: content | locution | argument;
content	: '{'(contentSet|contentVar)(','contentSet|contentVar)*'}';
contentSet	: upperChar;
contentVar	: lowerChar;
locution	: '<' moveID',' content'>';
moveID	: identifier;
argument	: '<'conclusion',' premises'>';
conclusion	: contentVar;
premises	: '{'contentVar(','contentVar)*'}';
storeName	: identifier;
requirements	: '{'condition ('&'condition)*'}' | '{'requirements('||'requirements)*'}';
condition	: conditionID'('parameter(','parameter)*')';
conditionID	: identifier;
conditional	: '{''if' requirements 'then' effects ('elseif'requirements'then'effects)*('else'effects)?'}';
interaction	: '{'moveID',' content(','opener)?','rulebody'}';
opener	: string;
string	: '"'(upperChar|lowerChar|number|symbol)+'"';
rulebody	: (effects | conditional ('&'conditional)*);
strict	: 'strict';
liberal	: 'liberal';
set	: 'set';
queue	: 'queue';
stack	: 'stack';
publ	: 'public';
priv	: 'private';
initial	: 'initial';
turnwise	: 'turnwise';
movewise	: 'movewise';
upperChar	: UpperChar;
lowerChar	: LowerChar;
symbol	: Symbol;
identifier	: Identifier;
number	: Number;
Identifier	: UpperChar (UpperChar | LowerChar | Number)+;
LowerChar	: 'a'..'z' ;
Number	: '0'..'9' '0'..'9'*;	
Symbol	:  ' ' | '?' | ',' | '.' ;
UpperChar	: 'A'..'Z' ;
NEWLINE	: ( ' ' | '\t' | '\r'| '\n' )+ {$channel=HIDDEN;};